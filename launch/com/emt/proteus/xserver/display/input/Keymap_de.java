/*     */ package com.emt.proteus.xserver.display.input;
/*     */ 
/*     */ import java.awt.event.KeyEvent;
/*     */ import java.io.PrintStream;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class Keymap_de
/*     */   extends Keymap
/*     */ {
/*     */   private static final int VK_ALT_GRAPH = 21;
/*  30 */   private int[] _map = { 0, 0, 0, 0, 65307, 0, 0, 0, 49, 33, 185, 161, 50, 34, 178, 2755, 51, 167, 179, 163, 52, 36, 188, 164, 53, 37, 189, 2756, 54, 38, 190, 2757, 55, 47, 123, 2758, 56, 40, 91, 2761, 57, 41, 93, 177, 48, 61, 125, 176, 223, 63, 92, 191, 65105, 65104, 65115, 65116, 65288, 0, 0, 0, 65289, 65056, 0, 0, 113, 81, 64, 2009, 119, 87, 435, 419, 101, 69, 8364, 0, 114, 82, 182, 174, 116, 84, 956, 940, 122, 90, 2299, 165, 117, 85, 2302, 2300, 105, 73, 2301, 697, 111, 79, 248, 216, 112, 80, 254, 222, 252, 220, 65111, 65112, 43, 42, 65107, 65108, 65293, 0, 0, 0, 65507, 0, 0, 0, 97, 65, 230, 198, 115, 83, 223, 167, 100, 68, 240, 208, 102, 70, 496, 170, 103, 71, 959, 957, 104, 72, 689, 673, 106, 74, 0, 0, 107, 75, 930, 38, 108, 76, 435, 419, 246, 214, 65105, 65113, 228, 196, 65106, 65114, 65106, 176, 172, 0, 65505, 0, 0, 0, 35, 39, 65104, 65109, 121, 89, 171, 0, 120, 88, 187, 0, 99, 67, 162, 169, 118, 86, 2770, 96, 98, 66, 2771, 39, 110, 78, 0, 0, 109, 77, 181, 186, 44, 59, 2211, 215, 46, 58, 183, 247, 45, 95, 65120, 65110, 65506, 0, 0, 0, 65450, 0, 0, 0, 65513, 65511, 0, 0, 32, 0, 0, 0, 65509, 0, 0, 0, 65470, 0, 0, 0, 65471, 0, 0, 0, 65472, 0, 0, 0, 65473, 0, 0, 0, 65474, 0, 0, 0, 65475, 0, 0, 0, 65476, 0, 0, 0, 65477, 0, 0, 0, 65478, 0, 0, 0, 65479, 0, 0, 0, 65407, 65273, 0, 0, 65300, 0, 0, 0, 65429, 65463, 0, 0, 65431, 65464, 0, 0, 65434, 65465, 0, 0, 65453, 0, 0, 0, 65430, 65460, 0, 0, 65437, 65461, 0, 0, 65432, 65462, 0, 0, 65451, 0, 0, 0, 65436, 65457, 0, 0, 65433, 65458, 0, 0, 65435, 65459, 0, 0, 65438, 65456, 0, 0, 65439, 65454, 0, 0, 65377, 65301, 0, 0, 0, 0, 0, 0, 60, 62, 124, 166, 65480, 0, 0, 0, 65481, 0, 0, 0, 65360, 0, 0, 0, 65362, 0, 0, 0, 65365, 0, 0, 0, 65361, 0, 0, 0, 0, 0, 0, 0, 65363, 0, 0, 0, 65367, 0, 0, 0, 65364, 0, 0, 0, 65366, 0, 0, 0, 65379, 0, 0, 0, 65535, 0, 0, 0, 65421, 0, 0, 0, 65508, 0, 0, 0, 65299, 65387, 0, 0, 65377, 65301, 0, 0, 65455, 0, 0, 0, 65406, 65312, 0, 0, 65299, 65387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   Keymap_de()
/*     */   {
/* 282 */     this.width = 4;
/* 283 */     this.start = 8;
/* 284 */     this.count = 248;
/* 285 */     this.map = this._map;
/*     */   }
/*     */   
/*     */   public final int getCode(KeyEvent e) {
/* 289 */     if (e.isShiftDown()) this.state = ((byte)(this.state | 0x1));
/* 290 */     if (e.isControlDown()) this.state = ((byte)(this.state | 0x4));
/* 291 */     if (e.isAltDown()) this.state = ((byte)(this.state | 0x8));
/* 292 */     int key = e.getKeyCode();
/*     */     
/* 294 */     if ((e.isAltDown()) && (e.isControlDown())) {
/* 295 */       key = 21;
/*     */     }
/*     */     
/*     */ 
/* 299 */     if (key != 0) {
/* 300 */       switch (key) {
/*     */       case 65: 
/*     */       case 66: 
/*     */       case 67: 
/*     */       case 68: 
/*     */       case 69: 
/*     */       case 70: 
/*     */       case 71: 
/*     */       case 72: 
/*     */       case 73: 
/*     */       case 74: 
/*     */       case 75: 
/*     */       case 76: 
/*     */       case 77: 
/*     */       case 78: 
/*     */       case 79: 
/*     */       case 80: 
/*     */       case 81: 
/*     */       case 82: 
/*     */       case 83: 
/*     */       case 84: 
/*     */       case 85: 
/*     */       case 86: 
/*     */       case 87: 
/*     */       case 88: 
/*     */       case 89: 
/*     */       case 90: 
/*     */         break;
/*     */       case 48: 
/*     */       case 49: 
/*     */       case 50: 
/*     */       case 51: 
/*     */       case 52: 
/*     */       case 53: 
/*     */       case 54: 
/*     */       case 55: 
/*     */       case 56: 
/*     */       case 57: 
/*     */         break;
/*     */       case 10: 
/* 340 */         key = 65293; break;
/*     */       case 8: 
/* 342 */         key = 65288; break;
/*     */       case 9: 
/* 344 */         key = 65289; break;
/*     */       
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       case 32: 
/*     */       case 44: 
/*     */       case 46: 
/*     */       case 47: 
/*     */       case 59: 
/*     */       case 61: 
/*     */       case 91: 
/*     */       case 92: 
/*     */       case 93: 
/*     */         break;
/*     */       
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */       case 16: 
/* 372 */         key = 65505; break;
/*     */       case 17: 
/* 374 */         key = 65507; break;
/*     */       case 18: 
/* 376 */         key = 65513; break;
/*     */       case 21: 
/* 378 */         key = 65406; break;
/*     */       case 19: 
/* 380 */         key = 65299; break;
/*     */       case 20: 
/* 382 */         key = 65509; break;
/*     */       case 27: 
/* 384 */         key = 65307; break;
/*     */       case 33: 
/* 386 */         key = 65365; break;
/*     */       case 34: 
/* 388 */         key = 65366; break;
/*     */       case 35: 
/* 390 */         key = 65367; break;
/*     */       case 36: 
/* 392 */         key = 65360; break;
/*     */       case 37: 
/* 394 */         key = 65361; break;
/*     */       case 38: 
/* 396 */         key = 65362; break;
/*     */       case 39: 
/* 398 */         key = 65363; break;
/*     */       case 40: 
/* 400 */         key = 65364; break;
/*     */       case 96: 
/* 402 */         key = 65456; break;
/*     */       case 97: 
/* 404 */         key = 65457; break;
/*     */       case 98: 
/* 406 */         key = 65458; break;
/*     */       case 99: 
/* 408 */         key = 65459; break;
/*     */       case 100: 
/* 410 */         key = 65460; break;
/*     */       case 101: 
/* 412 */         key = 65461; break;
/*     */       case 102: 
/* 414 */         key = 65462; break;
/*     */       case 103: 
/* 416 */         key = 65463; break;
/*     */       case 104: 
/* 418 */         key = 65464; break;
/*     */       case 105: 
/* 420 */         key = 65465; break;
/*     */       case 106: 
/* 422 */         key = 65450; break;
/*     */       case 107: 
/* 424 */         key = 65451; break;
/*     */       case 108: 
/* 426 */         key = 65452; break;
/*     */       case 109: 
/* 428 */         key = 65453; break;
/*     */       case 110: 
/* 430 */         key = 65454; break;
/*     */       case 111: 
/* 432 */         key = 65455; break;
/*     */       case 112: 
/* 434 */         key = 65470; break;
/*     */       case 113: 
/* 436 */         key = 65471; break;
/*     */       case 114: 
/* 438 */         key = 65472; break;
/*     */       case 115: 
/* 440 */         key = 65473; break;
/*     */       case 116: 
/* 442 */         key = 65474; break;
/*     */       case 117: 
/* 444 */         key = 65475; break;
/*     */       case 118: 
/* 446 */         key = 65476; break;
/*     */       case 119: 
/* 448 */         key = 65477; break;
/*     */       case 120: 
/* 450 */         key = 65478; break;
/*     */       case 121: 
/* 452 */         key = 65479; break;
/*     */       case 122: 
/* 454 */         key = 65480; break;
/*     */       case 123: 
/* 456 */         key = 65481; break;
/*     */       case 127: 
/* 458 */         key = 65535; break;
/*     */       case 144: 
/* 460 */         key = 65407; break;
/*     */       case 145: 
/* 462 */         key = 65300; break;
/*     */       case 154: 
/* 464 */         key = 65377; break;
/*     */       case 155: 
/* 466 */         key = 65379; break;
/*     */       case 156: 
/* 468 */         key = 65386; break;
/*     */       case 157: 
/* 470 */         key = 65511; break;
/*     */       
/*     */ 
/*     */ 
/*     */       case 11: 
/*     */       case 12: 
/*     */       case 13: 
/*     */       case 14: 
/*     */       case 15: 
/*     */       case 22: 
/*     */       case 23: 
/*     */       case 24: 
/*     */       case 25: 
/*     */       case 26: 
/*     */       case 28: 
/*     */       case 29: 
/*     */       case 30: 
/*     */       case 31: 
/*     */       case 41: 
/*     */       case 42: 
/*     */       case 43: 
/*     */       case 45: 
/*     */       case 58: 
/*     */       case 60: 
/*     */       case 62: 
/*     */       case 63: 
/*     */       case 64: 
/*     */       case 94: 
/*     */       case 95: 
/*     */       case 124: 
/*     */       case 125: 
/*     */       case 126: 
/*     */       case 128: 
/*     */       case 129: 
/*     */       case 130: 
/*     */       case 131: 
/*     */       case 132: 
/*     */       case 133: 
/*     */       case 134: 
/*     */       case 135: 
/*     */       case 136: 
/*     */       case 137: 
/*     */       case 138: 
/*     */       case 139: 
/*     */       case 140: 
/*     */       case 141: 
/*     */       case 142: 
/*     */       case 143: 
/*     */       case 146: 
/*     */       case 147: 
/*     */       case 148: 
/*     */       case 149: 
/*     */       case 150: 
/*     */       case 151: 
/*     */       case 152: 
/*     */       case 153: 
/*     */       default: 
/* 527 */         key = e.getKeyChar();break;
/*     */       }
/*     */       
/*     */     } else {
/* 531 */       key = e.getKeyChar();
/*     */     }
/*     */     
/*     */ 
/*     */ 
/*     */ 
/* 537 */     int s = 32;
/* 538 */     if (km != null) {
/* 539 */       int i = 0;
/* 540 */       int j = 0;
/* 541 */       s = km.start;
/* 542 */       while ((i < km.count * km.width) && 
/* 543 */         (km.map[i] != key)) {
/* 544 */         i++;
/* 545 */         j++;
/* 546 */         if (j == km.width) {
/* 547 */           j = 0;
/* 548 */           s++;
/*     */         }
/*     */       }
/*     */     }
/* 552 */     return s;
/*     */   }
/*     */   
/*     */   public static void main(String[] arg) {
/* 556 */     km = new Keymap_gb();
/* 557 */     if (km != null) {
/* 558 */       int i = 0;
/* 559 */       int j = 0;
/* 560 */       int s = km.start;
/* 561 */       System.out.print(s + ": ");
/* 562 */       while (i < km.count * km.width) {
/* 563 */         System.out.print(km.map[i] + ", ");
/* 564 */         i++;
/* 565 */         j++;
/* 566 */         if (j == km.width) {
/* 567 */           j = 0;
/* 568 */           s++;
/* 569 */           System.out.print("\n" + s + ": ");
/*     */         }
/*     */       }
/*     */     }
/*     */   }
/*     */ }


/* Location:              C:\Users\Joey\Downloads\launch.jar!\com\emt\proteus\xserver\display\input\Keymap_de.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */